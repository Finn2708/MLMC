/******************************************************************************
 * Interdisciplinary Research Group on Optronics and Avionics                 *
 ******************************************************************************
 * Application:     ----
 * Component:       Rate Limiter
 *
 * Authors:         Hagen.Hasberg@Haw-Hamburg.de
 *
 * Created:         2018.02.19
 * Updated:         2019.02.25
 *
 * Version:         0.01
 ******************************************************************************
 * Description:     ----                                                      *
 *****************************************************************************/

#ifndef __OPAV_RATE_LIMITER_H__
#define __OPAV_RATE_LIMITER_H__

/******************************************************************************
 *                                 Includes                                   *
 *****************************************************************************/

#include <stdint.h>

/******************************************************************************
 *                              Class Definition                              *
 *****************************************************************************/

class RateLimiter
{
    /******************************************************************************
     *                         Construction & Destruction                         *
     *****************************************************************************/
public:
             RateLimiter(float rateUp=0, float rateDown=0);

    virtual ~RateLimiter();

    /******************************************************************************
     *                                  Tune Rate                                 *
     *****************************************************************************/
    
    virtual void tuneRates(float rateUp, float rateDown);
    
    /******************************************************************************
     *                                     Run                                    *
     *****************************************************************************/
    
    virtual float limitRate (float processVariable, float dt); // dt in seconds
    
    virtual void  resetState();
    
    /******************************************************************************
     *                                   Private                                  *
     *****************************************************************************/
private:
    /////////// Rates ///////////
    float rate_up;
    float rate_down;
    
    /////////// State ///////////
    float state_sum;
    
};

#endif
